<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>atony2099 develop note</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on atony2099 develop note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 09 Apr 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Review20200913</title>
      <link>http://localhost:1313/post/daily/review20200913/</link>
      <pubDate>Sun, 13 Sep 2020 18:07:54 +0800</pubDate>
      
      <guid>http://localhost:1313/post/daily/review20200913/</guid>
      <description>最近 今年过得真的很糟糕；其实这几年就过得很糟糕；但是现在我已经快31岁了；基本在这个行业要被淘汰了。不能再这样得过且过；时间不多了； 希望每周</description>
    </item>
    
    <item>
      <title>运营简历</title>
      <link>http://localhost:1313/post/resum/</link>
      <pubDate>Tue, 04 Aug 2020 23:07:29 +0800</pubDate>
      
      <guid>http://localhost:1313/post/resum/</guid>
      <description>简历1: 用户运营 工作经历：广州坡喜信息科技有限公司 时间：2017—2019 岗位：用户运营 主要工作内容: 1、 引导目标用户成为网站注册会员； 2、</description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>http://localhost:1313/post/design/facade/</link>
      <pubDate>Sun, 02 Aug 2020 12:48:29 +0800</pubDate>
      
      <guid>http://localhost:1313/post/design/facade/</guid>
      <description>All Design Patterns in Go (Golang) 什么是设计模式？ 在给定条件下，解决问题一种通用，可重用的方案； In software engineering, a software design pattern is a general, reusable solution to a commonly occurring problem within a given context in software design. 设计模式分类 门面模</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>http://localhost:1313/post/golang/architecture/</link>
      <pubDate>Thu, 14 May 2020 11:39:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang/architecture/</guid>
      <description>basic rule  testable: each layer must  TDD test driven development
basic rule  Independent testable  how make interface through each year;
 domain respon  repository </description>
    </item>
    
    <item>
      <title>Go package</title>
      <link>http://localhost:1313/post/golang/gopackage/</link>
      <pubDate>Thu, 14 May 2020 11:39:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang/gopackage/</guid>
      <description>常用命令 go get 下载对应的包和它的依赖，并调用go install安装 Get downloads the packages named by the import paths, along with their dependencies. It then installs the named packages, like &amp;lsquo;go install&amp;rsquo;. download way https: git clone https://s ssh: 1 2 [url &amp;#34;ssh://git@github.com/&amp;#34;] insteadOf = https://github.com/ `` git</description>
    </item>
    
    <item>
      <title>Golang 中的类型</title>
      <link>http://localhost:1313/post/golang/type/</link>
      <pubDate>Thu, 14 May 2020 11:39:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang/type/</guid>
      <description>类型分类 1. 基础类型 1 2 3 4 int float32, float64 bool string 2.复合类型 container arrary slice map struct pointer channel function interface 3. 类型的声明（type declaration） 1. type definitions vs type alias 1 2 3 4 5 6 7 8</description>
    </item>
    
    <item>
      <title>interface</title>
      <link>http://localhost:1313/post/golang/interface/</link>
      <pubDate>Thu, 14 May 2020 11:39:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang/interface/</guid>
      <description>Interfaces Explained 1. what is is a type contain a set of method signature 2. used for 引入一个中间层，调用方和实现方解耦 3.type assertion 1 2 var a interface{} = 100; var aa,ok = a.(string) 4. compile time check 5. interface with pointer and value if methods receiver is value; then value and pointer implement the interface for</description>
    </item>
    
    <item>
      <title>map</title>
      <link>http://localhost:1313/post/golang/map/</link>
      <pubDate>Thu, 14 May 2020 11:39:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang/map/</guid>
      <description>reference: 哈希表 Map实现原理分析 深度解密Go语言之 map map的实现 key 通过 hash function映射数组的指定位置上 解决冲突的方式 如果该位置上已经有存储值</description>
    </item>
    
    <item>
      <title>methods</title>
      <link>http://localhost:1313/post/golang/methods/</link>
      <pubDate>Thu, 14 May 2020 11:39:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang/methods/</guid>
      <description>Interfaces Explained
what is? function + recevier
pass by value ? pass parameters by copying the value or pointer
feature if a methods is called, the receiver will be copy every time;</description>
    </item>
    
    <item>
      <title>Test</title>
      <link>http://localhost:1313/post/golang/test/</link>
      <pubDate>Thu, 14 May 2020 11:39:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang/test/</guid>
      <description>Test Driven Development: what it is, and what it is not. basic concept unit test; integration test unit: small piece of code integration test a gropu of unit TTD test driven development write test implement the code Refactor test first development: 先写单元测试，再实现具体逻辑，再重构 以单元测试作为驱动； test</description>
    </item>
    
    <item>
      <title>深入了解GPS调度</title>
      <link>http://localhost:1313/post/channel/</link>
      <pubDate>Thu, 30 Apr 2020 21:26:51 +0800</pubDate>
      
      <guid>http://localhost:1313/post/channel/</guid>
      <description>GPS 1. schedule 3. 为什么 2. channel 1. 数据结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 type hchan struct { qcount uint // total data in the queue dataqsiz uint // size of the circular queue buf unsafe.Pointer // points to an array of dataqsiz elements elemsize uint16 closed uint32 elemtype *_type</description>
    </item>
    
    <item>
      <title>Cpu</title>
      <link>http://localhost:1313/post/cpu/</link>
      <pubDate>Wed, 01 Apr 2020 17:01:29 +0800</pubDate>
      
      <guid>http://localhost:1313/post/cpu/</guid>
      <description>[计算机科学速成课】40集全 Computer - CPU(Central Processing Unit) Architecture of the central processing unit (CPU) Different Classes of CPU Registers cpu control unit: 从内存中获取指令(instructions)，通过控制寄存器单元和运算单</description>
    </item>
    
    <item>
      <title>数据库索引</title>
      <link>http://localhost:1313/post/database/mysql/</link>
      <pubDate>Mon, 30 Mar 2020 21:26:51 +0800</pubDate>
      
      <guid>http://localhost:1313/post/database/mysql/</guid>
      <description>1. 从 binary search tree 到 b+ tree 数据库索引为什么使用B+树？ MySQL索引背后的数据结构及算法原理 1分钟了解MyISAM与InnoDB的索引差异 Introduction of B-Tree 我必须</description>
    </item>
    
    <item>
      <title>数据库索引</title>
      <link>http://localhost:1313/post/database/trasaction/</link>
      <pubDate>Mon, 30 Mar 2020 21:26:51 +0800</pubDate>
      
      <guid>http://localhost:1313/post/database/trasaction/</guid>
      <description>mysql 的执行过程 查询缓存 解析器:语法解析 查询优化器：生成最佳执行计划 查询存储引擎：根据执行计划，调用存储引擎相关接口，完成实际的查找</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      <description>11 我的学习笔记12s</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/base/base/02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/base/base/02/</guid>
      <description>regular expression refernce 1. what is 2. syntax base single char quantifiers(数量) position(位置) \d 匹配数字 * 0个或者更多 ^一行的开头 \w 匹配word(数字、字母)</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/db/mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/db/mysql/</guid>
      <description>mysql reference MySQL Architecture and Components MySQL相关（番外篇）- innodb 逻辑存储结构 图说：InnoDB之表空间 BTree和B+Tree详解 What does eq_ref and ref types mean in MySQL explain EXPLAIN Output Format MySQL · 答疑</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/db/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/db/redis/</guid>
      <description>redis 数据类型 string container list hash set zset bitmap and 缓存问题 大量查询语句绕过缓存，直接落在数据库上 fix: 熔断；降级 1. 缓存穿透 (cache peneration) 查询的语句在db中始终不存在，导致cach</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/db/transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/db/transaction/</guid>
      <description>mysql 事务 reference mysql日志系统之redo log和bin log MySQL事务日志 Redo log(重做) 和 Undo log（撤销） MySQL之 bin log、redo log</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/golang/base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/golang/base/</guid>
      <description>golang golang 特性 1. 轻类型；去掉类型； type+ methods 方式 2. 支持高并发 3. /</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/golang/bitwise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/golang/bitwise/</guid>
      <description>bitwise Bitwise operators [cheat sheet]
Built-in operators    Operation Result Description     0011 &amp;amp; 0101 0001 Bitwise AND   0011 | 0101 0111 Bitwise OR   0011 ^ 0101 0110 Bitwise XOR   ^0101 1010 Bitwise NOT (same as 1111 ^ 0101)   0011 &amp;amp;^ 0101 0010 Bitclear (AND NOT)   00110101&amp;lt;&amp;lt;2 11010100 Left shift   00110101&amp;lt;&amp;lt;100 00000000 No upper limit on shift count   00110101&amp;gt;&amp;gt;2 00001101 Right shift    </description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/golang/command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/golang/command/</guid>
      <description>command spaw a process 1  dateCmd := exec.Command(&amp;#34;date&amp;#34;)   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/golang/enum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/golang/enum/</guid>
      <description>enum Ultimate Visual Guide to Go Enums and iota Representing enums in go what is enum? Enumeration Type: 一组常量，同属于一种类型 相比常量 枚举是常量的升级版 1. 自动类型校验，不需要额外检查 1 2 3 4 5 6 7 8 9 10 11 12</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/golang/gopkg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/golang/gopkg/</guid>
      <description>golang package flag flag implements command-line flag parsing.
1    </description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/golang/readwrite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/golang/readwrite/</guid>
      <description>log log files Read Write inteface i/o的读写只是两个简单的协议 1 2 3 4 5 6 7 8 9 10 // read to []byte type Reader interface { Read(p []byte) (n int, err error) } // write from []byte type Writer interface { Write(p []byte) (n int, err error) }</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/golang/reflect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/golang/reflect/</guid>
      <description>reflect 1. what is ? 运行时操作对象 1. 使用场景 struct to map</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/golang/regex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/golang/regex/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/golang/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/golang/string/</guid>
      <description>string what is  a read-only slice of bytes;   a strings can hold arbitrary byte sequence, even they are not always valid UFT-8 byte sequence for:  const sample = &amp;quot;\xbd\xb2\x3d\xbc\x20\xe2\x8c\x98&amp;quot; will print mess; ��=� ⌘
  A string literal, absent byte-level escapes, always holds valid UTF-8 sequences.
     java use uft-16
    internal implement 1 2 3 4  type StringHeader struct { Data uintptr Len int }   back quote vs double quote   back quote: will not escape characters</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/golang/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/golang/template/</guid>
      <description>template 1. syntax The templating language contains a rich set of control structures to render your HTML. Here you will get an overview of the most commonly used ones. To get a detailed list of all possible structures visit: text/template
basic syntax    Control Structure Definition     {{/* a comment */}} Defines a comment   {{.}} Renders the root element   {{.Title}} Renders the “Title”-field in a nested element   {{if .</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/golang/vscode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/golang/vscode/</guid>
      <description>vscode install install go tool;
 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/micro/base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/micro/base/</guid>
      <description>基础概念 ##服务: 熔断 降级 熔断: 被动 降级: 主动 使用本地方法替换远程服务。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/test/</guid>
      <description>plane base  compile operate algorithm DB  MYSQL NO-SQL   english  develop  golang micro   </description>
    </item>
    
    <item>
      <title>2020-09-14T10:06:44&#43;0800</title>
      <link>http://localhost:1313/post/golang/gpm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/golang/gpm/</guid>
      <description>深入GPM调度 reference 详尽干货！从源码角度看 Golang 的调度 调度器 golang runtime 1. 是什么？ src/runtime/ 最底层的库；包含调度，垃圾回收等的实现； Golang 是如何调度的？ goroutin</description>
    </item>
    
  </channel>
</rss>