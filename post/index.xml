<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on atony2099 develop note</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on atony2099 develop note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 04 Aug 2020 23:07:29 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>运营简历</title>
      <link>http://localhost:1313/post/resum/</link>
      <pubDate>Tue, 04 Aug 2020 23:07:29 +0800</pubDate>
      
      <guid>http://localhost:1313/post/resum/</guid>
      <description>简历1: 用户运营 工作经历：广州坡喜信息科技有限公司 时间：2017—2019 岗位：用户运营 主要工作内容: 1、 引导目标用户成为网站注册会员； 2、</description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>http://localhost:1313/post/design/facade/</link>
      <pubDate>Sun, 02 Aug 2020 12:48:29 +0800</pubDate>
      
      <guid>http://localhost:1313/post/design/facade/</guid>
      <description>All Design Patterns in Go (Golang) 什么是设计模式？ 在给定条件下，解决问题一种通用，可重用的方案； In software engineering, a software design pattern is a general, reusable solution to a commonly occurring problem within a given context in software design. 设计模式分类 门面模</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>http://localhost:1313/post/golang/architecture/</link>
      <pubDate>Thu, 14 May 2020 11:39:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang/architecture/</guid>
      <description>basic rule  testable: each layer must  TDD test driven development
basic rule  Independent testable  how make interface through each year;
 domain respon  repository </description>
    </item>
    
    <item>
      <title>Go package</title>
      <link>http://localhost:1313/post/golang/gopackage/</link>
      <pubDate>Thu, 14 May 2020 11:39:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang/gopackage/</guid>
      <description>常用命令 go get 下载对应的包和它的依赖，并调用go install安装 Get downloads the packages named by the import paths, along with their dependencies. It then installs the named packages, like &amp;lsquo;go install&amp;rsquo;. download way https: git clone https://s ssh: 1 2 [url &amp;#34;ssh://git@github.com/&amp;#34;] insteadOf = https://github.com/ `` git</description>
    </item>
    
    <item>
      <title>interface</title>
      <link>http://localhost:1313/post/golang/interface/</link>
      <pubDate>Thu, 14 May 2020 11:39:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang/interface/</guid>
      <description>Interfaces Explained 1. what is is a type contain a set of method signature 2. used for 引入一个中间层，调用方和实现方解耦 3.type assertion 1 2 var a interface{} = 100; var aa,ok = a.(string) 4. compile time check 5. interface with pointer and value if methods receiver is value; then value and pointer implement the interface for</description>
    </item>
    
    <item>
      <title>interface</title>
      <link>http://localhost:1313/post/golang/map/</link>
      <pubDate>Thu, 14 May 2020 11:39:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang/map/</guid>
      <description>map的两种实现方式</description>
    </item>
    
    <item>
      <title>methods</title>
      <link>http://localhost:1313/post/golang/methods/</link>
      <pubDate>Thu, 14 May 2020 11:39:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang/methods/</guid>
      <description>Interfaces Explained
what is? function + recevier
pass by value ? pass parameters by copying the value or pointer
feature if a methods is called, the receiver will be copy every time;</description>
    </item>
    
    <item>
      <title>Test</title>
      <link>http://localhost:1313/post/golang/test/</link>
      <pubDate>Thu, 14 May 2020 11:39:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang/test/</guid>
      <description>Test Driven Development: what it is, and what it is not. basic concept unit test; integration test unit: small piece of code integration test a gropu of unit TTD test driven development write test implement the code Refactor test first development: 先写单元测试，再实现具体逻辑，再重构 以单元测试作为驱动； test</description>
    </item>
    
    <item>
      <title>深入了解GPS调度</title>
      <link>http://localhost:1313/post/channel/</link>
      <pubDate>Thu, 30 Apr 2020 21:26:51 +0800</pubDate>
      
      <guid>http://localhost:1313/post/channel/</guid>
      <description>GPS 1. schedule 3. 为什么 2. channel 1. 数据结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 type hchan struct { qcount uint // total data in the queue dataqsiz uint // size of the circular queue buf unsafe.Pointer // points to an array of dataqsiz elements elemsize uint16 closed uint32 elemtype *_type</description>
    </item>
    
    <item>
      <title>Cpu</title>
      <link>http://localhost:1313/post/cpu/</link>
      <pubDate>Wed, 01 Apr 2020 17:01:29 +0800</pubDate>
      
      <guid>http://localhost:1313/post/cpu/</guid>
      <description>[计算机科学速成课】40集全 Computer - CPU(Central Processing Unit) Architecture of the central processing unit (CPU) Different Classes of CPU Registers cpu control unit: 从内存中获取指令(instructions)，通过控制寄存器单元和运算单</description>
    </item>
    
    <item>
      <title>数据库索引</title>
      <link>http://localhost:1313/post/database/mysql/</link>
      <pubDate>Mon, 30 Mar 2020 21:26:51 +0800</pubDate>
      
      <guid>http://localhost:1313/post/database/mysql/</guid>
      <description>1. 从 binary search tree 到 b+ tree 数据库索引为什么使用B+树？ MySQL索引背后的数据结构及算法原理 1分钟了解MyISAM与InnoDB的索引差异 Introduction of B-Tree 我必须</description>
    </item>
    
    <item>
      <title>数据库索引</title>
      <link>http://localhost:1313/post/database/trasaction/</link>
      <pubDate>Mon, 30 Mar 2020 21:26:51 +0800</pubDate>
      
      <guid>http://localhost:1313/post/database/trasaction/</guid>
      <description>mysql 的执行过程 查询缓存 解析器:语法解析 查询优化器：生成最佳执行计划 查询存储引擎：根据执行计划，调用存储引擎相关接口，完成实际的查找</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/golang/readwrite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/golang/readwrite/</guid>
      <description>log log files Read Write inteface i/o的读写只是两个简单的协议 1 2 3 4 5 6 7 8 9 10 // read to []byte type Reader interface { Read(p []byte) (n int, err error) } // write from []byte type Writer interface { Write(p []byte) (n int, err error) }</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/golang/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/golang/string/</guid>
      <description>string what is  a read-only slice of bytes;   a strings can hold arbitrary byte sequence, even they are not always valid UFT-8 byte sequence for:  const sample = &amp;quot;\xbd\xb2\x3d\xbc\x20\xe2\x8c\x98&amp;quot; will print mess; ��=� ⌘
  A string literal, absent byte-level escapes, always holds valid UTF-8 sequences.
     java use uft-16
    internal implement 1 2 3 4  type StringHeader struct { Data uintptr Len int }   back quote vs double quote   back quote: will not escape characters</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/golang/type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/golang/type/</guid>
      <description>types in golang category 1. basic type 2.composite type   container
 arrary slice map    struct
  pointer
  channel
  function
  interface types
  3. type declaration 1. type definitions 1 2 3 4 5 6 7 8 9 10  // 1. basic type type A int // 2. struct type Bird struct { } // 3. interface type BirdInterface interface { }   2.</description>
    </item>
    
  </channel>
</rss>